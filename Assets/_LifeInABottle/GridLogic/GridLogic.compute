#pragma kernel FunctionKernel

StructuredBuffer<uint> _PreviousGrid;
RWStructuredBuffer<uint> _NextGrid;
uint2 _Resolution;

void SetNextGrid(uint3 id, uint value)
{
    _NextGrid[id.x + id.y * _Resolution.x] = value;
}

uint GetType(uint3 id)
{
    return _PreviousGrid[id.x + id.y * _Resolution.x];
}

uint GetType(int idX, int idY)
{
    return _PreviousGrid[idX + idY * _Resolution.x];
}

bool IsBlocked(uint3 id)
{
    return _PreviousGrid[id.x + id.y * _Resolution.x] == 0;
}

bool IsThereATypeOnMyNeighbours(uint3 id, uint type)
{
    bool leftCheck = (id.x > 0) && GetType(id.x - 1, id.y) == type;
    bool rightCheck = (id.x < _Resolution.x) && GetType(id.x + 1, id.y) == type;
    bool upCheck = (id.y < _Resolution.y) && GetType(id.x, id.y + 1) == type;
    bool bottomCheck = (id.y > 0) && GetType(id.x, id.y - 1) == type;
    bool topRightCheck = (id.y < _Resolution.y) && (id.x < _Resolution.x) && GetType(id.x + 1, id.y + 1) == type;
    bool topLeftCheck = (id.y < _Resolution.y) && (id.x > 0) && GetType(id.x - 1, id.y + 1) == type;
    bool bottomRightCheck = (id.y > 0) && (id.x < _Resolution.x) && GetType(id.x + 1, id.y - 1) == type;
    bool bottomLeftCheck = (id.y > 0) && (id.x > 0) && GetType(id.x - 1, id.y - 1) == type;
    
 
    return leftCheck || rightCheck || upCheck || bottomCheck || topRightCheck || topLeftCheck || bottomRightCheck || bottomLeftCheck;
}

bool IsThereATypeOnUp(uint3 id, uint type)
{
    return (id.y < _Resolution.y) && GetType(id.x, id.y + 1) == type;
}

bool CanRainFallFromUp(uint3 id)
{
    bool isThereRainOnTop = IsThereATypeOnUp(id, 4) || IsThereATypeOnUp(id, 5);
    bool canBeRain = GetType(id) == 1 || GetType(id) == 2;
    return isThereRainOnTop && canBeRain;
}

bool CanRainFallToDown(uint3 id)
{
    bool isRain = GetType(id) == 4 || GetType(id) == 5;
    bool canDownBeRain = (id.y > 0) && (GetType(id.x, id.y - 1) == 1 || GetType(id.x, id.y - 1) == 2);
    return isRain && canDownBeRain;
}

uint BeRainType(uint3 id)
{
    return GetType(id) == 1 ? 4 : 5;
}

uint BeNotRainType(uint3 id)
{
    return GetType(id) == 4 ? 1 : 2;
}

[numthreads(8,8,1)]
void FunctionKernel (uint3 id : SV_DispatchThreadID)
{
    if (id.x > _Resolution.x || id.y > _Resolution.y) return;
    
    uint finalValue = IsBlocked(id) ? 0 :
                      (CanRainFallFromUp(id) ? BeRainType(id) :
                      (CanRainFallToDown(id) ? BeNotRainType(id) :
                       GetType(id)));
    SetNextGrid(id, finalValue);
}
