#pragma kernel GameOfLife

RWStructuredBuffer<uint> _Grid;
StructuredBuffer<uint> _PreviousGrid;
uint2 _Resolution;

uint GetFlatIndex(uint3 id)
{
    return id.x + id.y * _Resolution.x;
}

uint GetType(int flatIndex)
{
    return _PreviousGrid[flatIndex];
}

uint GetType(uint3 id)
{
    return _PreviousGrid[GetFlatIndex(id)];
}

void SetType(int flatIndex, uint type)
{
    _Grid[flatIndex] = type;
}

uint GetAliveNeighbourCount(uint3 id)
{
    uint count = 0;
    
    for (int y = -1; y < 2; y++)
    {
        for (int x = -1; x < 2; x++)
        {
            if (x == 0 && y == 0) continue;
            
            uint unboundX = (x + id.x + _Resolution.x) % _Resolution.x;
            uint unboundY = (y + id.y + _Resolution.y) % _Resolution.y;
            
            uint3 neighbour = uint3(unboundX, unboundY, 0);
            
            count += GetType(neighbour);
        }
    }
    
    return count;
}

[numthreads(8,8,1)]
void GameOfLife (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _Resolution.x || id.y >= _Resolution.y) return;
    
    int flatIndex = GetFlatIndex(id);
    
    uint aliveNeighbourCount = GetAliveNeighbourCount(id);
    bool wasAlive = _PreviousGrid[flatIndex] == 1;
    
    bool isAlive = aliveNeighbourCount == 3 || (wasAlive && aliveNeighbourCount == 2);
    
    SetType(flatIndex, isAlive);
}
